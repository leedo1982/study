자바의 자료형 시스템은 두부분으로 나뉜다.
하나는 int, double, boolean 등의 기본 자료형
다른 하나는 String List 등참조 자료형
모든 자료형에는 대응되는 참조 자료형이 있는데 이를 객체화된 기본 자료형이라 부른다.

int, double, boolean ==> Integer, Double, Boolean ( 객체화된 기본 자료형)


기본 자료형과 객체화된 기본 자료형 사이에는 세가지 큰 차이점이 있다.
첫번째, 기본 자료형은 값만 가지지만 객체화된 기본 자료형은 값 외에도 신원(identity)을 가진다.
		따라서, 객체화된 기본 자료형 객체가 두개 있을때, 그 값은 같더라도 신원은 다를수 있다.
두번째, 기본 자료형에 저장되는 값은 전부 기능적으로 완전한 값이지만, 객체화된 자료형에 저장되는 값에는 그 이외에도 아무 기능도 없는 값, 즉  null 이 하나 있다는 것이다.
세번째, 기본 자료형은 시간이나 공간 요구량 측면에서 인반적으로 객체 표현형보다 효율적이라는 것이다. 
주의 하지않으면 이런 차이 때문에 곤란을 겪게 될 것이다.

Comparator<Integer> naturalOrder = new Comparator<Integer>(){
	public int compare(Integer first, Integer second){
		return first < second ? -1 : (first == second ? 0 : 1 ) ;
	}
}

연산자  == 는 객체 참조를 통해 두 객체의 신원을 비교한다.
객체화된 기본 자료형에  == 연산자를 사용하는 것은 거의 항상 오류라고 봐야 한다.

거의 모든 경우에, 기본자료형과 객체화된 기본 자료형을 한 연산 안에 엮어 놓으면 객체화된 기본 자료형은 자동으로 기본자료형으로 반환된다.

그렇다면 객체화된 기분 자료형은 언제 사용하나?!
첫번째, 컬렉션의 요서, 키, 값으로 사용할때. 컬렉션에는 기본 자료형을 넣을 수 없으므로 객체화된 자료형을 써야한다.
형인자 자료형의 형인자로는 객체화된 기본 자료형을 써야한다.

요약하자면, 가능하다면 기본자료형을 사용하라!!!!!
객체화된 기본 자료형과 기본 자료형을 한 표현식 안에 뒤섞으면 비객체화가 자동으로 일어나며, 그과정에서 NullPointerException이 발생할 수 있다.
