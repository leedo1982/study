 버블 정렬(bubble Sort)는 두 인접한 원소를 검사하여 정렬하는 방법
 (원소의 이동이 검푸이 수면으로 올라오는 모습과 비슷하여 지어진 이름)
 
 1. 시간복잡도가 상당히 느리다.
 2. 코드가 단순하여 자주 사용
 
 
 
 data :  6 4 7 9 1
 
 1step  :  6과  4를 비교하여 큰수를 뒤로 교체(이동)
    
    4 6 7 9 1
    
2step : 오른쪽으로 한칸이동하여 6과 7을 비교(이동없음)
 
    4 6 7 9 1 

3step : 오른쪽으로 한칸이동하여 7과 9 비교(이동없음)

    4 6 7 9 1 
    
4step : 오른쪽으로 한칸이동하여 9과 1 비교(이동)

    4 6 7 1 9 
    
2-1step : 맨처음으로 돌아와서 4와 6을 비교(이동없음)

(반복)


분석 
- 메모리 사용공간 : n개의 원소에 대하여 n개의 메모리 사용

- 연산시간 : 
최선의 경우(= 이미 정렬되어 있는 경우)
1.비교횟수 : i번째 원소를 n-1번 비교하므로, n(n-1)/2번
2.자리교환 회수 : 발생하지 않음 


최악의 경우(= 자료가 역순으로 정렬되어있는 경우)
1.비교횟수 : i번째 원소를 n-1번 비교하므로, n(n-1)/2번
2.자리교환 회수 : i번째 원소를 (n-1)번 교환하므로 , n(n-1)/2번


평균시간 복잡도는 O(n^2)

-java code
public class BubbleSort {

	public static void main(String[] args) {
		int intArray[] = new int[] { 5, 90, 35, 45, 150, 3 };
		System.out.println("Array Before Bubble Sort");
		for (int i = 0; i < intArray.length; i++) {
			System.out.print(intArray[i] + " ");
		}
		bubbleSort(intArray);
		System.out.println("");
		System.out.println("Array After Bubble Sort");
		for (int i = 0; i < intArray.length; i++) {
			System.out.print(intArray[i] + " ");
		}
	}

	private static void bubbleSort(int[] intArray) {
		int n = intArray.length;
		int temp = 0;

		for (int i = 0; i < n; i++) {
			for (int j = 1; j < (n - i); j++) {

				if (intArray[j - 1] > intArray[j]) {
					// swap the elements!
					temp = intArray[j - 1];
					intArray[j - 1] = intArray[j];
					intArray[j] = temp;
				}
			}
		}
	}
}
       
        System.out.println("Array Before Bubble Sort");
        for(int i=0; i < intArray.length; i++){
                System.out.print(intArray[i] + " ");
        }
       
        bubbleSort(intArray);
       
        System.out.println("");
       
        System.out.println("Array After Bubble Sort");
        for(int i=0; i < intArray.length; i++){
                System.out.print(intArray[i] + " ");
        }

	}
	 private static void bubbleSort(int[] intArray) {
     
        
         int n = intArray.length;
         int temp = 0;
        
         for(int i=0; i < n; i++){
                 for(int j=1; j < (n-i); j++){
                        
                         if(intArray[j-1] > intArray[j]){
                                 //swap the elements!
                                 temp = intArray[j-1];
                                 intArray[j-1] = intArray[j];
                                 intArray[j] = temp;
                         }
                        
                 }
         }

 }
}
