열거 자료형 원소들이 주로 집합에 사용될 경우, 전통적으로는 int enum 패턴을 이용했다.
각 상수에 2의 거듭제곱 값을 대입하는것이다.

//비트필드 열거형 상수 - 이제는 피해 할 구현법
public class Text{
 public static final int STYLE_BOLE          = 1 <<0; //1
 public static final int STYLE_ITALIC        = 1 <<1; //2 
 public static final int STYLE_UNDERKINE     = 1 <<2; //4
 public static final int STYLE_STRIKETHROUGH = 1 <<3; //8
 
 // 이 메서드의 인자는 STYLE_상수를 비트별(bitwise) OR 한값이거나 0
 public void applyStyles(int styles){....}
}

이렇게 하면 상수들을 집합에 넣을때 비트별(bitwise) OR 연산을 사용할 수 있다.

text.applyStyles(STY_BOLD | STYLE_ITALIC);

//EnumSet - 비트 필드를 대신할 현대적 기술
public class Text{
 public enum Style { BOLD, ITALIC, UNDERLINE, STRIKETHROUGH }
 
 //어떤 Set 객체도 인자로 전달할 수 있으나, EnumSet이 분명 최선
 public void applyStyles(Set<Style> styles){....}
}

text.applyStyles(EnumSet.of(Style.BOLD, Style.ITALIC));

요약하자면, 열거 자료형을 집합에 사용해야 한다고 해서 비트필드로 표현하면 곤란하다는 것이다.
