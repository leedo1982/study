//correnctness 100 : performance 62	
	function solution(A) {
		var aLen = A.length;
		var cnt = 0;
		for (var i = 0; i < aLen; i++) {
			var max1 = i + A[i];
			for (var j = i + 1; j < aLen; j++) {
				var min2 = j - A[j];

				if (min2 <= max1) {
					cnt++;
					if (cnt > 10,000,000) return -1;
				}
			}
		}
		return cnt;
	}
	
	

//correnctness 100 : performance 100
copy by http://julienrenaux.fr/2015/04/27/codility-efficient-algorithm-solutions-in-javascript/#NumberOfDiscIntersections
function solution(A) {
    var len =  A.length,
    tupples = [],
    count =0;
     
    for (var i=0; i < len; i++){
        tupples.push([i - A[i], i + A[i]]);  
    }
     
    // [[5,5], [0,4], [-4, 6]] => [[-4, 6], [0,4], [5,5]]
    tupples.sort(function(a,b){
        return a[0] - b[0];
    });
 
    for (var j=0; j < len; j++){
        var tupple = tupples[j];
        for (var k=j+1; k < len; k++){
            var comparisonTupple = tupples[k];
            if (comparisonTupple[0] <= tupple[1]){
                count++;
                if (count >10000000){
                    return -1;    
                }
            } else {
                break;    
            }
        } 
    }
    return count;
}
